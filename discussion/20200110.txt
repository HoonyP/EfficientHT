- HT는 직접 구현하여서 진행 ( 체이닝, 더블해싱 )
체이닝은 O(k) 크기로 생성, 더블해싱은 O(2k or 3k) 크기로 생성
=> q = 3 ~ 6 일때 더블해싱의 경우 충돌이 많을것으로 예상됨
+) STL 결과와 비교

========================== 
* 벡터와 리스트를 사용하여 구현
Linear Probing, Double Hashing, Chaining 총 3가지로 구현하여 STL과 시간 비교를 했을때
Chaining이 Insert 할때 속도가 빠른 결과를 보였음. 하지만 값을 찾을때 시간이 오래 걸리는 문제가 있음
테스트한것은 0부터 ~ 1,000,000 까지 순서대로 값을 insert 하고 search 하도록 함
순서대로 하기때문에 Chaining 기반의 해시테이블이 search 하는데 시간이 오래걸리게 됨
====================

- 알고리즘간의 결과 비교를 위하여 occurrence 개수, matching index, 검증 횟수 체크 필요
: 위의 3가지에 대해서 먼저 확인하고 엑셀에 정리( 파라미터 별로 구분하여 정리 )한뒤, 수행시간 측정 진행

- 환경 : VS2017(EfficientHT), 연구실 Workstation 사양 => summary에 정리하면 됨

- 실험에 쓰인 파라미터는 시트에 표현

* 데이터셋
다우존스데이터 (n=34,685)
랜덤데이터 (n=1,000,000)
소비전력데이터 (n=1,000,000) : 1,048,575에서 100만까지만 읽어서 처리

* 패턴집합 - k=200~2,000 / m=8~15,20 / q=3~9
1. 텍스트에서 추출한 패턴집합 ( 우선 진행하고, 성능을 보고 2,3 을 할지 결정) // tc_gen.cpp
2. 랜덤하게 생성한 패턴집합
3. 텍스트와 랜덤을 1:1 비율로 생성한 패턴집합